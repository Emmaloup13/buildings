{"mappings":"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","sources":["FeatureTooltip.js"],"sourcesContent":["/* global itowns */\r\n/**\r\n * A tooltip that can display some useful information about a feature when\r\n * hovering it.\r\n *\r\n * @module FeatureToolTip\r\n *\r\n * @example\r\n * // Initialize the FeatureToolTip\r\n * FeatureToolTip.init(viewerDiv, view);\r\n *\r\n * // Add layers\r\n * var wfsSource = new itowns.WFSSource(...);\r\n * var wfsLayer = new itowns.ColorLayer('id_wfs', { source: wfsSource });\r\n * view.addLayer(wfsLayer);\r\n *\r\n * var fileSource = new itowns.FileSource(...);\r\n * var fileLayer = new itowns.GeometryLayer('id_myFile', new THREE.Group(), { source: fileSource });\r\n * view.addLayer(fileLayer);\r\n *\r\n * FeatureToolTip.addLayer(wfsLayer);\r\n * FeatureToolTip.addLayer(fileLayer);\r\n */\r\nvar FeatureToolTip = (function _() {\r\n    var tooltip;\r\n    var view;\r\n    var layers = [];\r\n    var layersId = [];\r\n\r\n    var mouseDown = 0;\r\n    document.body.addEventListener('mousedown', function _() {\r\n        ++mouseDown;\r\n    }, false);\r\n    document.body.addEventListener('mouseup', function _() {\r\n        --mouseDown;\r\n    }, false);\r\n\r\n    function moveToolTip(event) {\r\n        tooltip.innerHTML = '';\r\n        tooltip.style.display = 'none';\r\n\r\n        var features = view.pickFeaturesAt.apply(view, [event, 3].concat(layersId));\r\n\r\n        var layer;\r\n        for (var layerId in features) {\r\n            if (features[layerId].length == 0) {\r\n                continue;\r\n            }\r\n\r\n            layer = layers[layersId.indexOf(layerId)];\r\n            if (!layer) {\r\n                continue;\r\n            }\r\n            if (typeof layer.options.filterGeometries == 'function') {\r\n                features[layerId] = layer.options.filterGeometries(features[layerId], layer.layer) || [];\r\n            }\r\n            tooltip.innerHTML += fillToolTip(features[layerId], layer.layer, layer.options);\r\n        }\r\n\r\n        if (tooltip.innerHTML != '') {\r\n            tooltip.style.display = 'block';\r\n            tooltip.style.left = view.eventToViewCoords(event).x + 'px';\r\n            tooltip.style.top = view.eventToViewCoords(event).y + 'px';\r\n        }\r\n    }\r\n\r\n    function getGeometryProperties(geometry) {\r\n        return function properties() { return geometry.properties; };\r\n    }\r\n\r\n    function fillToolTip(features, layer, options) {\r\n        var content = '';\r\n        var feature;\r\n        var geometry;\r\n        var style;\r\n        var fill;\r\n        var stroke;\r\n        var symb = '';\r\n        var prop;\r\n\r\n        for (var p = 0; p < features.length; p++) {\r\n            feature = features[p];\r\n            geometry = feature.geometry;\r\n            style = (geometry.properties && geometry.properties.style) || feature.style || layer.style;\r\n            var context = { globals: {}, properties: getGeometryProperties(geometry) };\r\n            style = style.drawingStylefromContext(context);\r\n\r\n            if (feature.type === itowns.FEATURE_TYPES.POLYGON) {\r\n                symb = '&#9724';\r\n                if (style) {\r\n                    fill = style.fill && style.fill.color;\r\n                    stroke = style.stroke && ('1.25px ' + style.stroke.color);\r\n                }\r\n            } else if (feature.type === itowns.FEATURE_TYPES.LINE) {\r\n                symb = '&#9473';\r\n                fill = style && style.stroke && style.stroke.color;\r\n                stroke = '0px';\r\n            } else if (feature.type === itowns.FEATURE_TYPES.POINT) {\r\n                symb = '&#9679';\r\n                if (style && style.point) {  // Style and style.point can be undefined if no style options were passed\r\n                    fill = style.point.color;\r\n                    stroke = '1.25px ' + style.point.line;\r\n                }\r\n            }\r\n\r\n            content += '<div>';\r\n            content += '<span style=\"color: ' + fill + '; -webkit-text-stroke: ' + stroke + '\">';\r\n            content += symb + ' ';\r\n            content += '</span>';\r\n\r\n            if (geometry.properties) {\r\n                content += (geometry.properties.name || geometry.properties.nom || geometry.properties.description || layer.name || '');\r\n            }\r\n\r\n            if (feature.type === itowns.FEATURE_TYPES.POINT) {\r\n                content += '<br/><span class=\"coord\">long ' + feature.coordinates[0].toFixed(4) + '</span>';\r\n                content += '<br/><span class=\"coord\">lat ' + feature.coordinates[1].toFixed(4) + '</span>';\r\n            }\r\n\r\n            if (geometry.properties && !options.filterAllProperties) {\r\n                if (options.format) {\r\n                    for (prop in geometry.properties) {\r\n                        if (!options.filterProperties.includes(prop)) {\r\n                            content += options.format(prop, geometry.properties[prop]) || '';\r\n                        }\r\n                    }\r\n                } else {\r\n                    content += '<ul>';\r\n                    for (prop in geometry.properties) {\r\n                        if (!options.filterProperties.includes(prop)) {\r\n                            content += '<li>' + prop + ': ' + geometry.properties[prop] + '</li>';\r\n                        }\r\n                    }\r\n\r\n                    if (content.endsWith('<ul>')) {\r\n                        content = content.replace('<ul>', '');\r\n                    } else {\r\n                        content += '</ul>';\r\n                    }\r\n                }\r\n            }\r\n\r\n            content += '</div>';\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Initialize the `FeatureToolTip` plugin for a specific view.\r\n         *\r\n         * @param {Element} viewerDiv - The element containing the viewer.\r\n         * @param {View} viewer - The view to bind the tooltip to.\r\n         *\r\n         * @example\r\n         * const viewerDiv = document.getElementById('viewerDiv');\r\n         * const view = new GlobeView(viewerDiv, { longitude: 4, latitude: 45, altitude: 3000 });\r\n         *\r\n         * FeatureToolTip.init(viewerDiv, view);\r\n         *\r\n         * @memberof module:FeatureToolTip\r\n         */\r\n        init: function _(viewerDiv, viewer) {\r\n            // HTML element\r\n            tooltip = document.createElement('div');\r\n            tooltip.className = 'tooltip';\r\n            viewerDiv.appendChild(tooltip);\r\n\r\n            // View binding\r\n            view = viewer;\r\n\r\n            // Mouse movement listening\r\n            function onMouseMove(event) {\r\n                if (!mouseDown) {\r\n                    moveToolTip(event);\r\n                } else {\r\n                    tooltip.style.left = view.eventToViewCoords(event).x + 'px';\r\n                    tooltip.style.top = view.eventToViewCoords(event).y + 'px';\r\n                }\r\n            }\r\n\r\n            document.addEventListener('mousemove', onMouseMove, false);\r\n            document.addEventListener('mousedown', onMouseMove, false);\r\n        },\r\n\r\n        /**\r\n         * Add a layer to be picked by the tooltip.\r\n         *\r\n         * @param {Layer} layer - The layer to add.\r\n         * @param {Object} options - Options to have more custom content displayed.\r\n         * @param {function} [options.filterGeometries] - A callback to filter\r\n         * geometries following a criteria, like an id found on FeatureGeometry\r\n         * properties.  This is useful to remove duplicates, for example when a\r\n         * feature is present on multiple tiles at the same time (see the\r\n         * example below).  This function takes two parameters: a list of\r\n         * features (usually a `Array<Feature>`) and the `Layer` associated to\r\n         * these features.\r\n         * @param {function} [options.format] - A function that takes the name\r\n         * of the property currently being processed and its value, and gives\r\n         * the appropriate HTML output to it. If this method is specified, no\r\n         * others properties other than the ones handled in it will be\r\n         * displayed.\r\n         * @param {Array<string>} [options.filterProperties] - An array of\r\n         * properties to filter.\r\n         * @param {boolean} [options.filterAllProperties=true] - Filter all the\r\n         * properties, and don't display anything besides the name of the layer\r\n         * the feature is attached to.\r\n         *\r\n         * @return {Layer} The added layer.\r\n         *\r\n         * @example\r\n         * FeatureToolTip.addLayer(wfsLayer, {\r\n         *      filterProperties: ['uuid', 'notes', 'classification'],\r\n         *      filterGeometries: (features, layer) => {\r\n         *          const idList = [];\r\n         *          return features.filter((f) => {\r\n         *              if (!idList.includes(f.geometry.properties.id)) {\r\n         *                  idList.push(f.geometry.properties.id);\r\n         *                  return f;\r\n         *              }\r\n         *          });\r\n         *      }\r\n         * });\r\n         *\r\n         * @memberof module:FeatureToolTip\r\n         */\r\n        addLayer: function _(layer, options) {\r\n            if (!layer.isLayer) {\r\n                return layer;\r\n            }\r\n\r\n            var opts = options || { filterAllProperties: true };\r\n            opts.filterProperties = opts.filterProperties == undefined ? [] : opts.filterProperties;\r\n            opts.filterProperties.concat(['name', 'nom', 'style', 'description']);\r\n\r\n            layers.push({ layer: layer, options: opts });\r\n            layersId.push(layer.id);\r\n\r\n            return layer;\r\n        },\r\n    };\r\n}());\r\n\r\nif (typeof module != 'undefined' && module.exports) {\r\n    module.exports = FeatureToolTip;\r\n}\r\n"],"names":["FeatureToolTip","tooltip","view","layers","layersId","mouseDown","getGeometryProperties","geometry","properties","fillToolTip","features","layer","options","feature","style","fill","stroke","prop","content","symb","p","length","context","globals","drawingStylefromContext","type","itowns","FEATURE_TYPES","POLYGON","color","LINE","POINT","point","line","name","nom","description","coordinates","toFixed","filterAllProperties","format","filterProperties","includes","endsWith","replace","document","body","addEventListener","init","viewerDiv","viewer","onMouseMove","event","left","eventToViewCoords","x","top","y","innerHTML","display","pickFeaturesAt","apply","concat","layerId","indexOf","filterGeometries","moveToolTip","createElement","className","appendChild","addLayer","isLayer","opts","undefined","push","id","module","exports"],"version":3,"file":"index.3df26705.js.map"}